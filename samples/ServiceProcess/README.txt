This sample demonstrates the implementation of a Binder-based
system service.  A "service" is an entity managing persistent
state -- it stays around between application switches, and allows
multiple client threads/processes to access the single state it
is managing.  The approach we are taking here is to create a Binder
object that runs in some persistent process (which is up to you)
and is published in the Binder namespace so that others can discover
it.

To do this you need to:

1. Define an interface using IDL.  (Usually in the case of
   implementing a service, you will need to define a custom
   interface; there probably won't be an existing interface
   that can serve your needs.)  The IDL here is SampleService.idl.

2. Place the interface marshalling code (the .cpp generated by
   pidgen) in to a library.

   Note that you do not actually HAVE to put this code in a
   library -- it is also perfectly valid to have each client
   statically link with the pidgen-generated marshalling code.
   We prefer placing this in a library simply to reduce code
   duplication.

3. If you want to allow C code to access the service, you will
   need to provide a C API.  This is useful, for example, if you
   need to expose an API to third party developers before we
   expose the Binder APIs to them.  Here we implement this in
   SampleServiceLib.h and SampleServiceLib.cpp.

4. Create a Binder component implementing the new interface.
   This is the code that represents your service.  In the sample
   here it can be found in SampleService.h, SampleService.cpp,
   SampleService_components.cpp, and Manifest.xml.

Finally, this sample shows how to take all of these pieces and
build them into the final shared library and Binder package.

To actually make use of the service, you will need to somewhere
instantiate it and publish it in the namespace.  This is often
done via a shell command at boot like this:

	$ new -p /services/sample_service org.openbinder.samples.SampleService

Be sure if you are going to write a real service derived from this
example that you do these things:

1. Change the IDL file to be in your own namespace (i.e., com::sony).
   
2. Update Makefile so that the service component has a name in this
   same namespace (i.e., com.palm).
